# hello.py

from telebot import types
from zadachi_analit import test_analit_start
from zadachi_razrab import test_razrab_start
from openpyxl import load_workbook

def check_user_exists(user_id: int, file_name: str) -> bool:
    try:
        wb = load_workbook(filename=file_name)
        ws = wb.active
        for row in ws.iter_rows(values_only=True):
            if row[0] == user_id:
                return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ Excel: {e}")
        return False
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_start(bot, message, user_data):
    user_id = message.from_user.id
    user_data[user_id] = {}
    user_data[user_id]['name'] = ''
    user_data[user_id]['surname'] = ''
    user_data[user_id]['age'] = ''
    user_data[user_id]['source'] = ''
    user_data[user_id]['nickname'] = ''
    if check_user_exists(user_id, 'analit_stag_list.xlsx') or check_user_exists(user_id, 'razrab_stag_list.xlsx'):
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    else:
        user_data[user_id] = {}
        user_data[user_id]['name'] = ''
        user_data[user_id]['surname'] = ''
        user_data[user_id]['age'] = ''
        user_data[user_id]['source'] = ''
        user_data[user_id]['nickname'] = ''
        bot.send_photo(message.chat.id, open(r'cat.jpg', 'rb'))
        msg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø HR-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ê–≤—Ç–æ–º–∞–∫–æ–Ω. –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è! üåü –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ù–∞—á–Ω–µ–º —Å –∏–º–µ–Ω–∏?")
        bot.register_next_step_handler(msg, lambda m: get_name(bot, m, user_data))  # –ù–µ –∑–∞–±—ã—Ç—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ get_name show_direction_description

def get_name(bot, message, user_data):
    user_id = message.from_user.id
    user_data[user_id]['name'] = message.text
    user_data[user_id]['nickname'] = message.from_user.username

    msg = bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ, {user_data[user_id]['name']}! –ê –∫–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")
    bot.register_next_step_handler(msg, lambda m: get_surname(bot, m, user_data))

def get_surname(bot, message, user_data):
    user_id = message.from_user.id
    user_data[user_id]['surname'] = message.text

    msg = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    bot.register_next_step_handler(msg, lambda m: get_age(bot, m, user_data))

def get_age(bot, message, user_data):
    user_id = message.from_user.id
    user_data[user_id]['age'] = message.text

    msg = bot.send_message(message.chat.id, "–ë—Ä—Ä.. –¢–∞–∫ –º–Ω–æ–≥–æ! –ú–Ω–µ —Ç–æ –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤! –û—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª(–∞) –æ –Ω–∞—à–∏—Ö —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∞—Ö?", reply_markup=create_source_keyboard())
    bot.register_next_step_handler(msg, lambda m: save_source(bot, m, user_data))

def create_source_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("HeadHunter"), types.KeyboardButton("–°–∞–π—Ç –ê–≤—Ç–æ–º–∞–∫–æ–Ω"), types.KeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç—ã"), types.KeyboardButton("–î—Ä—É–≥–æ–µ"))
    return keyboard

def save_source(bot, message, user_data):
    user_id = message.from_user.id
    user_data[user_id]['source'] = message.text

    msg = bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è —Ç–µ–±—è —Ä–æ–ª–∏–∫ —Å –Ω–∞—à–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º!")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    video_url = r"test_video.mp4"
    bot.send_video(message.chat.id, open(video_url, 'rb'), reply_markup=create_video_keyboard())
    bot.register_next_step_handler(msg, lambda m: show_direction_description(bot, m, user_data))

def create_video_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–°—É–ø–µ—Ä! –•–æ—á—É –∫ –≤–∞–º!"))
    return keyboard

def show_direction_description(bot, message, user_data):
    user_id = message.from_user.id
    # –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏
    bot.send_message(message.chat.id, "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ –ê–≤—Ç–æ–º–∞–∫–æ–Ω! –£ –Ω–∞—Å —Ç–µ–±—è –∂–¥—É—Ç 4 –º–µ—Å—è—Ü–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∫–ª–∞—Å—Å–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–ª–∏ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞. –î–∞–π –∫–∞—Ä—å–µ—Ä–µ –Ω–æ–≤—ã–π –∏–º–ø—É–ª—å—Å —Å –Ω–∞–º–∏!")

    # –í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"), types.KeyboardButton("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"))
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∏ –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ:", reply_markup=keyboard)

    bot.register_next_step_handler(msg, lambda m: handle_direction_choice(bot, m, user_data))

def handle_direction_choice(bot, message, user_data):
    user_id = message.from_user.id
    direction = message.text

    if direction == "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞":
        bot.send_message(message.chat.id, "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤ –ê–≤—Ç–æ–º–∞–∫–æ–Ω–µ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –º–∏—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π. –ó–¥–µ—Å—å —Ç—ã –æ—Å–≤–æ–∏—à—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞—É—á–∏—à—å—Å—è —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ —Å—Ç–∞–Ω—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã, —Å–æ–∑–¥–∞—é—â–µ–π –±—É–¥—É—â–µ–µ!")
        ask_for_preference(bot, message, user_data, "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
    elif direction == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        bot.send_message(message.chat.id, "–°–∏—Å—Ç–µ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ –ê–≤—Ç–æ–º–∞–∫–æ–Ω–µ - —ç—Ç–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ –º–∏—Ä –∞–Ω–∞–ª–∏–∑–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Å–∏—Å—Ç–µ–º. –ó–¥–µ—Å—å —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö, –≤—ã—è–≤–ª—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è.")
        ask_for_preference(bot, message, user_data, "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

def ask_for_preference(bot, message, user_data, direction_name):
    user_id = message.from_user.id
    user_data[user_id]['direction'] = direction_name

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–î–∞, –≥–æ—Ç–æ–≤(–∞) –∫ —Ç–µ—Å—Ç—É"), types.KeyboardButton("–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É"))
    msg = bot.send_message(message.chat.id, f"–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction_name}? –¢—ã –≥–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è –∏ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏? –ï—Å–ª–∏ –¥–∞, —Ç–æ –¥–∞–≤–∞–π –ø–µ—Ä–µ–π–¥–µ–º –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é! –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è. –ü–æ–º–Ω–∏, —É —Ç–µ–±—è –≤—Å–µ–≥–æ 30 –º–∏–Ω—É—Ç!", reply_markup=keyboard)

    bot.register_next_step_handler(msg, lambda m: handle_preference_response(bot, m, user_data))

def handle_preference_response(bot, message, user_data):
    user_id = message.from_user.id
    response = message.text.lower()
    if response == "–¥–∞, –≥–æ—Ç–æ–≤(–∞) –∫ —Ç–µ—Å—Ç—É":
        if user_data[user_id]['direction'] == "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞":
            msg = bot.send_message(message.chat.id, "–¢–æ—á–Ω–æ? 30 –º–∏–Ω—É—Ç! –í–ø–µ—Ä–µ–¥, –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏!")
            # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            bot.register_next_step_handler(msg, lambda m: test_razrab_start(bot, m, user_data))

        elif user_data[user_id]['direction'] == "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
            msg = bot.send_message(message.chat.id, "–¢–æ—á–Ω–æ? 30 –º–∏–Ω—É—Ç! –í–ø–µ—Ä–µ–¥, –ê–Ω–∞–ª–∏—Ç–∏–∫–∏!")
            # –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤
            bot.register_next_step_handler(msg, lambda m:test_analit_start(bot, m, user_data))
    elif response == "–Ω–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É":
        show_direction_description(bot, message, user_data)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
